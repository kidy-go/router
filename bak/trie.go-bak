// trie.go kee > 2021/03/17

package router

import (
	"fmt"
	"github.com/kidy-go/utils"
	"regexp"
	"strings"
)

/**
 * 路径字典
 */
type Param struct {
	name  string
	value string
	typ   string
}

type Params struct {
	params []Param
}

func (p *Params) Insert(param Param) {
	p.params = append(p.params, param)
}

func (p *Params) Get(name string) Param {
	for _, param := range p.params {
		if strings.ToLower(name) == strings.ToLower(param.name) {
			return param
		}
	}
	return Param{}
}

type TriePath struct {
	part    string
	next    map[string]*TriePath
	num     int
	isWild  bool
	methods []string
	params  []*Param
}

func (t *TriePath) Insert(path string, methods ...string) {
	if len(path) == 0 {
		return
	}

	if path[0:1] == "/" {
		path = path[1:]
	}

	if t.next == nil {
		t.next = map[string]*TriePath{}
	}

	dir := path
	if i := strings.Index(path, "/"); i > -1 {
		dir, path = path[:i], path[i+1:]
	} else {
		path = ""
	}

	var (
		n  *TriePath
		ok bool
	)
	for _, n = range t.next {
		if n.part == dir {
			ok = true
			break
		}
	}
	if !ok {
		t.next[dir] = &TriePath{
			part:    dir,
			methods: methods,
			isWild:  strings.Index(dir, "{") == -1,
			next:    map[string]*TriePath{},
		}
	}

	// if _, ok := t.next[dir]; !ok {
	// 	t.next[dir] = &TriePath{
	// 		part:    dir,
	// 		methods: methods,
	// 		isWild:  strings.Index(dir, "{") == -1,
	// 		next:    map[string]*TriePath{},
	// 	}
	// }
	if len(path) > 0 {
		t.next[dir].Insert(path, methods...)
	}
}

func (t *TriePath) Match(path string, params *Params) bool {
	if len(path) == 0 {
		return true
	}

	if path[:1] == "/" {
		path = path[1:]
	}

	for _, next := range t.next {
		pKey, pTyp, pRp := parseMatch(next.part)

		pRp += utils.HasOr(len(next.next) == 0, `\z`, "").(string)
		regx := regexp.MustCompile(pRp)
		if ok := regx.MatchString(path); ok {
			// params...
			if p := regx.FindString(path); len(p) > 0 && len(pTyp) > 0 {
				fmt.Println(":<>:", pKey, pTyp, pRp, p)
				params.Insert(Param{
					name:  utils.HasOr(pKey, utils.GenUUID().ShortString()).(string),
					value: p,
					typ:   pTyp,
				})
			}

			path = regx.ReplaceAllString(path, "")

			if len(next.next) > 0 {
				if len(path) == 0 {
					return false
				}
				return next.Match(path, params)
			} else {
				return true
			}
		}
	}

	return false
}
